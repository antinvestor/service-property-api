// Code generated by MockGen. DO NOT EDIT.
// Source: property_grpc.pb.go

// Package property_v1 is a generated GoMock package.
package property_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockPropertyServiceClient is a mock of PropertyServiceClient interface.
type MockPropertyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyServiceClientMockRecorder
}

// MockPropertyServiceClientMockRecorder is the mock recorder for MockPropertyServiceClient.
type MockPropertyServiceClientMockRecorder struct {
	mock *MockPropertyServiceClient
}

// NewMockPropertyServiceClient creates a new mock instance.
func NewMockPropertyServiceClient(ctrl *gomock.Controller) *MockPropertyServiceClient {
	mock := &MockPropertyServiceClient{ctrl: ctrl}
	mock.recorder = &MockPropertyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyServiceClient) EXPECT() *MockPropertyServiceClientMockRecorder {
	return m.recorder
}

// AddLocality mocks base method.
func (m *MockPropertyServiceClient) AddLocality(ctx context.Context, in *Locality, opts ...grpc.CallOption) (*Locality, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLocality", varargs...)
	ret0, _ := ret[0].(*Locality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLocality indicates an expected call of AddLocality.
func (mr *MockPropertyServiceClientMockRecorder) AddLocality(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocality", reflect.TypeOf((*MockPropertyServiceClient)(nil).AddLocality), varargs...)
}

// AddPropertyType mocks base method.
func (m *MockPropertyServiceClient) AddPropertyType(ctx context.Context, in *PropertyType, opts ...grpc.CallOption) (*PropertyType, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPropertyType", varargs...)
	ret0, _ := ret[0].(*PropertyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPropertyType indicates an expected call of AddPropertyType.
func (mr *MockPropertyServiceClientMockRecorder) AddPropertyType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPropertyType", reflect.TypeOf((*MockPropertyServiceClient)(nil).AddPropertyType), varargs...)
}

// AddSubscription mocks base method.
func (m *MockPropertyServiceClient) AddSubscription(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSubscription", varargs...)
	ret0, _ := ret[0].(*Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockPropertyServiceClientMockRecorder) AddSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockPropertyServiceClient)(nil).AddSubscription), varargs...)
}

// CreateProperty mocks base method.
func (m *MockPropertyServiceClient) CreateProperty(ctx context.Context, in *Property, opts ...grpc.CallOption) (*PropertyState, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProperty", varargs...)
	ret0, _ := ret[0].(*PropertyState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProperty indicates an expected call of CreateProperty.
func (mr *MockPropertyServiceClientMockRecorder) CreateProperty(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).CreateProperty), varargs...)
}

// DeleteLocality mocks base method.
func (m *MockPropertyServiceClient) DeleteLocality(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*Locality, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLocality", varargs...)
	ret0, _ := ret[0].(*Locality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLocality indicates an expected call of DeleteLocality.
func (mr *MockPropertyServiceClientMockRecorder) DeleteLocality(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocality", reflect.TypeOf((*MockPropertyServiceClient)(nil).DeleteLocality), varargs...)
}

// DeleteProperty mocks base method.
func (m *MockPropertyServiceClient) DeleteProperty(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*PropertyState, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProperty", varargs...)
	ret0, _ := ret[0].(*PropertyState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProperty indicates an expected call of DeleteProperty.
func (mr *MockPropertyServiceClientMockRecorder) DeleteProperty(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).DeleteProperty), varargs...)
}

// DeleteSubscription mocks base method.
func (m *MockPropertyServiceClient) DeleteSubscription(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*PropertyState, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubscription", varargs...)
	ret0, _ := ret[0].(*PropertyState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockPropertyServiceClientMockRecorder) DeleteSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockPropertyServiceClient)(nil).DeleteSubscription), varargs...)
}

// HistoryOfProperty mocks base method.
func (m *MockPropertyServiceClient) HistoryOfProperty(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (PropertyService_HistoryOfPropertyClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HistoryOfProperty", varargs...)
	ret0, _ := ret[0].(PropertyService_HistoryOfPropertyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HistoryOfProperty indicates an expected call of HistoryOfProperty.
func (mr *MockPropertyServiceClientMockRecorder) HistoryOfProperty(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoryOfProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).HistoryOfProperty), varargs...)
}

// ListSubscriptions mocks base method.
func (m *MockPropertyServiceClient) ListSubscriptions(ctx context.Context, in *SubscriptionListRequest, opts ...grpc.CallOption) (PropertyService_ListSubscriptionsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscriptions", varargs...)
	ret0, _ := ret[0].(PropertyService_ListSubscriptionsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptions indicates an expected call of ListSubscriptions.
func (mr *MockPropertyServiceClientMockRecorder) ListSubscriptions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockPropertyServiceClient)(nil).ListSubscriptions), varargs...)
}

// ListType mocks base method.
func (m *MockPropertyServiceClient) ListType(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (PropertyService_ListTypeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListType", varargs...)
	ret0, _ := ret[0].(PropertyService_ListTypeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListType indicates an expected call of ListType.
func (mr *MockPropertyServiceClientMockRecorder) ListType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListType", reflect.TypeOf((*MockPropertyServiceClient)(nil).ListType), varargs...)
}

// SearchProperty mocks base method.
func (m *MockPropertyServiceClient) SearchProperty(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (PropertyService_SearchPropertyClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProperty", varargs...)
	ret0, _ := ret[0].(PropertyService_SearchPropertyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProperty indicates an expected call of SearchProperty.
func (mr *MockPropertyServiceClientMockRecorder) SearchProperty(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).SearchProperty), varargs...)
}

// StateOfProperty mocks base method.
func (m *MockPropertyServiceClient) StateOfProperty(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*PropertyState, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StateOfProperty", varargs...)
	ret0, _ := ret[0].(*PropertyState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateOfProperty indicates an expected call of StateOfProperty.
func (mr *MockPropertyServiceClientMockRecorder) StateOfProperty(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateOfProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).StateOfProperty), varargs...)
}

// UpdateProperty mocks base method.
func (m *MockPropertyServiceClient) UpdateProperty(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Property, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProperty", varargs...)
	ret0, _ := ret[0].(*Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProperty indicates an expected call of UpdateProperty.
func (mr *MockPropertyServiceClientMockRecorder) UpdateProperty(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProperty", reflect.TypeOf((*MockPropertyServiceClient)(nil).UpdateProperty), varargs...)
}

// MockPropertyService_ListTypeClient is a mock of PropertyService_ListTypeClient interface.
type MockPropertyService_ListTypeClient struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyService_ListTypeClientMockRecorder
}

// MockPropertyService_ListTypeClientMockRecorder is the mock recorder for MockPropertyService_ListTypeClient.
type MockPropertyService_ListTypeClientMockRecorder struct {
	mock *MockPropertyService_ListTypeClient
}

// NewMockPropertyService_ListTypeClient creates a new mock instance.
func NewMockPropertyService_ListTypeClient(ctrl *gomock.Controller) *MockPropertyService_ListTypeClient {
	mock := &MockPropertyService_ListTypeClient{ctrl: ctrl}
	mock.recorder = &MockPropertyService_ListTypeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyService_ListTypeClient) EXPECT() *MockPropertyService_ListTypeClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPropertyService_ListTypeClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPropertyService_ListTypeClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPropertyService_ListTypeClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPropertyService_ListTypeClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPropertyService_ListTypeClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPropertyService_ListTypeClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPropertyService_ListTypeClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPropertyService_ListTypeClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPropertyService_ListTypeClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPropertyService_ListTypeClient) Recv() (*PropertyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*PropertyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPropertyService_ListTypeClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPropertyService_ListTypeClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPropertyService_ListTypeClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPropertyService_ListTypeClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPropertyService_ListTypeClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockPropertyService_ListTypeClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPropertyService_ListTypeClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPropertyService_ListTypeClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPropertyService_ListTypeClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPropertyService_ListTypeClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPropertyService_ListTypeClient)(nil).Trailer))
}

// MockPropertyService_HistoryOfPropertyClient is a mock of PropertyService_HistoryOfPropertyClient interface.
type MockPropertyService_HistoryOfPropertyClient struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyService_HistoryOfPropertyClientMockRecorder
}

// MockPropertyService_HistoryOfPropertyClientMockRecorder is the mock recorder for MockPropertyService_HistoryOfPropertyClient.
type MockPropertyService_HistoryOfPropertyClientMockRecorder struct {
	mock *MockPropertyService_HistoryOfPropertyClient
}

// NewMockPropertyService_HistoryOfPropertyClient creates a new mock instance.
func NewMockPropertyService_HistoryOfPropertyClient(ctrl *gomock.Controller) *MockPropertyService_HistoryOfPropertyClient {
	mock := &MockPropertyService_HistoryOfPropertyClient{ctrl: ctrl}
	mock.recorder = &MockPropertyService_HistoryOfPropertyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyService_HistoryOfPropertyClient) EXPECT() *MockPropertyService_HistoryOfPropertyClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPropertyService_HistoryOfPropertyClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPropertyService_HistoryOfPropertyClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPropertyService_HistoryOfPropertyClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPropertyService_HistoryOfPropertyClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPropertyService_HistoryOfPropertyClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPropertyService_HistoryOfPropertyClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPropertyService_HistoryOfPropertyClient) Recv() (*PropertyState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*PropertyState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPropertyService_HistoryOfPropertyClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPropertyService_HistoryOfPropertyClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPropertyService_HistoryOfPropertyClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockPropertyService_HistoryOfPropertyClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPropertyService_HistoryOfPropertyClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPropertyService_HistoryOfPropertyClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPropertyService_HistoryOfPropertyClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyClient)(nil).Trailer))
}

// MockPropertyService_SearchPropertyClient is a mock of PropertyService_SearchPropertyClient interface.
type MockPropertyService_SearchPropertyClient struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyService_SearchPropertyClientMockRecorder
}

// MockPropertyService_SearchPropertyClientMockRecorder is the mock recorder for MockPropertyService_SearchPropertyClient.
type MockPropertyService_SearchPropertyClientMockRecorder struct {
	mock *MockPropertyService_SearchPropertyClient
}

// NewMockPropertyService_SearchPropertyClient creates a new mock instance.
func NewMockPropertyService_SearchPropertyClient(ctrl *gomock.Controller) *MockPropertyService_SearchPropertyClient {
	mock := &MockPropertyService_SearchPropertyClient{ctrl: ctrl}
	mock.recorder = &MockPropertyService_SearchPropertyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyService_SearchPropertyClient) EXPECT() *MockPropertyService_SearchPropertyClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPropertyService_SearchPropertyClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPropertyService_SearchPropertyClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPropertyService_SearchPropertyClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPropertyService_SearchPropertyClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPropertyService_SearchPropertyClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPropertyService_SearchPropertyClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPropertyService_SearchPropertyClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPropertyService_SearchPropertyClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPropertyService_SearchPropertyClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPropertyService_SearchPropertyClient) Recv() (*Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPropertyService_SearchPropertyClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPropertyService_SearchPropertyClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPropertyService_SearchPropertyClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPropertyService_SearchPropertyClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPropertyService_SearchPropertyClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockPropertyService_SearchPropertyClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPropertyService_SearchPropertyClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPropertyService_SearchPropertyClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPropertyService_SearchPropertyClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPropertyService_SearchPropertyClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPropertyService_SearchPropertyClient)(nil).Trailer))
}

// MockPropertyService_ListSubscriptionsClient is a mock of PropertyService_ListSubscriptionsClient interface.
type MockPropertyService_ListSubscriptionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyService_ListSubscriptionsClientMockRecorder
}

// MockPropertyService_ListSubscriptionsClientMockRecorder is the mock recorder for MockPropertyService_ListSubscriptionsClient.
type MockPropertyService_ListSubscriptionsClientMockRecorder struct {
	mock *MockPropertyService_ListSubscriptionsClient
}

// NewMockPropertyService_ListSubscriptionsClient creates a new mock instance.
func NewMockPropertyService_ListSubscriptionsClient(ctrl *gomock.Controller) *MockPropertyService_ListSubscriptionsClient {
	mock := &MockPropertyService_ListSubscriptionsClient{ctrl: ctrl}
	mock.recorder = &MockPropertyService_ListSubscriptionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyService_ListSubscriptionsClient) EXPECT() *MockPropertyService_ListSubscriptionsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPropertyService_ListSubscriptionsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPropertyService_ListSubscriptionsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPropertyService_ListSubscriptionsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPropertyService_ListSubscriptionsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPropertyService_ListSubscriptionsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPropertyService_ListSubscriptionsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPropertyService_ListSubscriptionsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPropertyService_ListSubscriptionsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPropertyService_ListSubscriptionsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPropertyService_ListSubscriptionsClient) Recv() (*Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPropertyService_ListSubscriptionsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPropertyService_ListSubscriptionsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPropertyService_ListSubscriptionsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPropertyService_ListSubscriptionsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPropertyService_ListSubscriptionsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockPropertyService_ListSubscriptionsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPropertyService_ListSubscriptionsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPropertyService_ListSubscriptionsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPropertyService_ListSubscriptionsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPropertyService_ListSubscriptionsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPropertyService_ListSubscriptionsClient)(nil).Trailer))
}

// MockPropertyServiceServer is a mock of PropertyServiceServer interface.
type MockPropertyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyServiceServerMockRecorder
}

// MockPropertyServiceServerMockRecorder is the mock recorder for MockPropertyServiceServer.
type MockPropertyServiceServerMockRecorder struct {
	mock *MockPropertyServiceServer
}

// NewMockPropertyServiceServer creates a new mock instance.
func NewMockPropertyServiceServer(ctrl *gomock.Controller) *MockPropertyServiceServer {
	mock := &MockPropertyServiceServer{ctrl: ctrl}
	mock.recorder = &MockPropertyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyServiceServer) EXPECT() *MockPropertyServiceServerMockRecorder {
	return m.recorder
}

// AddLocality mocks base method.
func (m *MockPropertyServiceServer) AddLocality(arg0 context.Context, arg1 *Locality) (*Locality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLocality", arg0, arg1)
	ret0, _ := ret[0].(*Locality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLocality indicates an expected call of AddLocality.
func (mr *MockPropertyServiceServerMockRecorder) AddLocality(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocality", reflect.TypeOf((*MockPropertyServiceServer)(nil).AddLocality), arg0, arg1)
}

// AddPropertyType mocks base method.
func (m *MockPropertyServiceServer) AddPropertyType(arg0 context.Context, arg1 *PropertyType) (*PropertyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPropertyType", arg0, arg1)
	ret0, _ := ret[0].(*PropertyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPropertyType indicates an expected call of AddPropertyType.
func (mr *MockPropertyServiceServerMockRecorder) AddPropertyType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPropertyType", reflect.TypeOf((*MockPropertyServiceServer)(nil).AddPropertyType), arg0, arg1)
}

// AddSubscription mocks base method.
func (m *MockPropertyServiceServer) AddSubscription(arg0 context.Context, arg1 *Subscription) (*Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubscription", arg0, arg1)
	ret0, _ := ret[0].(*Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockPropertyServiceServerMockRecorder) AddSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockPropertyServiceServer)(nil).AddSubscription), arg0, arg1)
}

// CreateProperty mocks base method.
func (m *MockPropertyServiceServer) CreateProperty(arg0 context.Context, arg1 *Property) (*PropertyState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProperty", arg0, arg1)
	ret0, _ := ret[0].(*PropertyState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProperty indicates an expected call of CreateProperty.
func (mr *MockPropertyServiceServerMockRecorder) CreateProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).CreateProperty), arg0, arg1)
}

// DeleteLocality mocks base method.
func (m *MockPropertyServiceServer) DeleteLocality(arg0 context.Context, arg1 *RequestID) (*Locality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocality", arg0, arg1)
	ret0, _ := ret[0].(*Locality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLocality indicates an expected call of DeleteLocality.
func (mr *MockPropertyServiceServerMockRecorder) DeleteLocality(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocality", reflect.TypeOf((*MockPropertyServiceServer)(nil).DeleteLocality), arg0, arg1)
}

// DeleteProperty mocks base method.
func (m *MockPropertyServiceServer) DeleteProperty(arg0 context.Context, arg1 *RequestID) (*PropertyState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProperty", arg0, arg1)
	ret0, _ := ret[0].(*PropertyState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProperty indicates an expected call of DeleteProperty.
func (mr *MockPropertyServiceServerMockRecorder) DeleteProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).DeleteProperty), arg0, arg1)
}

// DeleteSubscription mocks base method.
func (m *MockPropertyServiceServer) DeleteSubscription(arg0 context.Context, arg1 *RequestID) (*PropertyState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", arg0, arg1)
	ret0, _ := ret[0].(*PropertyState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockPropertyServiceServerMockRecorder) DeleteSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockPropertyServiceServer)(nil).DeleteSubscription), arg0, arg1)
}

// HistoryOfProperty mocks base method.
func (m *MockPropertyServiceServer) HistoryOfProperty(arg0 *RequestID, arg1 PropertyService_HistoryOfPropertyServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HistoryOfProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HistoryOfProperty indicates an expected call of HistoryOfProperty.
func (mr *MockPropertyServiceServerMockRecorder) HistoryOfProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoryOfProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).HistoryOfProperty), arg0, arg1)
}

// ListSubscriptions mocks base method.
func (m *MockPropertyServiceServer) ListSubscriptions(arg0 *SubscriptionListRequest, arg1 PropertyService_ListSubscriptionsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscriptions indicates an expected call of ListSubscriptions.
func (mr *MockPropertyServiceServerMockRecorder) ListSubscriptions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockPropertyServiceServer)(nil).ListSubscriptions), arg0, arg1)
}

// ListType mocks base method.
func (m *MockPropertyServiceServer) ListType(arg0 *SearchRequest, arg1 PropertyService_ListTypeServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListType indicates an expected call of ListType.
func (mr *MockPropertyServiceServerMockRecorder) ListType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListType", reflect.TypeOf((*MockPropertyServiceServer)(nil).ListType), arg0, arg1)
}

// SearchProperty mocks base method.
func (m *MockPropertyServiceServer) SearchProperty(arg0 *SearchRequest, arg1 PropertyService_SearchPropertyServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchProperty indicates an expected call of SearchProperty.
func (mr *MockPropertyServiceServerMockRecorder) SearchProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).SearchProperty), arg0, arg1)
}

// StateOfProperty mocks base method.
func (m *MockPropertyServiceServer) StateOfProperty(arg0 context.Context, arg1 *RequestID) (*PropertyState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateOfProperty", arg0, arg1)
	ret0, _ := ret[0].(*PropertyState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateOfProperty indicates an expected call of StateOfProperty.
func (mr *MockPropertyServiceServerMockRecorder) StateOfProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateOfProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).StateOfProperty), arg0, arg1)
}

// UpdateProperty mocks base method.
func (m *MockPropertyServiceServer) UpdateProperty(arg0 context.Context, arg1 *UpdateRequest) (*Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProperty", arg0, arg1)
	ret0, _ := ret[0].(*Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProperty indicates an expected call of UpdateProperty.
func (mr *MockPropertyServiceServerMockRecorder) UpdateProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProperty", reflect.TypeOf((*MockPropertyServiceServer)(nil).UpdateProperty), arg0, arg1)
}

// mustEmbedUnimplementedPropertyServiceServer mocks base method.
func (m *MockPropertyServiceServer) mustEmbedUnimplementedPropertyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPropertyServiceServer")
}

// mustEmbedUnimplementedPropertyServiceServer indicates an expected call of mustEmbedUnimplementedPropertyServiceServer.
func (mr *MockPropertyServiceServerMockRecorder) mustEmbedUnimplementedPropertyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPropertyServiceServer", reflect.TypeOf((*MockPropertyServiceServer)(nil).mustEmbedUnimplementedPropertyServiceServer))
}

// MockUnsafePropertyServiceServer is a mock of UnsafePropertyServiceServer interface.
type MockUnsafePropertyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePropertyServiceServerMockRecorder
}

// MockUnsafePropertyServiceServerMockRecorder is the mock recorder for MockUnsafePropertyServiceServer.
type MockUnsafePropertyServiceServerMockRecorder struct {
	mock *MockUnsafePropertyServiceServer
}

// NewMockUnsafePropertyServiceServer creates a new mock instance.
func NewMockUnsafePropertyServiceServer(ctrl *gomock.Controller) *MockUnsafePropertyServiceServer {
	mock := &MockUnsafePropertyServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePropertyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePropertyServiceServer) EXPECT() *MockUnsafePropertyServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPropertyServiceServer mocks base method.
func (m *MockUnsafePropertyServiceServer) mustEmbedUnimplementedPropertyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPropertyServiceServer")
}

// mustEmbedUnimplementedPropertyServiceServer indicates an expected call of mustEmbedUnimplementedPropertyServiceServer.
func (mr *MockUnsafePropertyServiceServerMockRecorder) mustEmbedUnimplementedPropertyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPropertyServiceServer", reflect.TypeOf((*MockUnsafePropertyServiceServer)(nil).mustEmbedUnimplementedPropertyServiceServer))
}

// MockPropertyService_ListTypeServer is a mock of PropertyService_ListTypeServer interface.
type MockPropertyService_ListTypeServer struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyService_ListTypeServerMockRecorder
}

// MockPropertyService_ListTypeServerMockRecorder is the mock recorder for MockPropertyService_ListTypeServer.
type MockPropertyService_ListTypeServerMockRecorder struct {
	mock *MockPropertyService_ListTypeServer
}

// NewMockPropertyService_ListTypeServer creates a new mock instance.
func NewMockPropertyService_ListTypeServer(ctrl *gomock.Controller) *MockPropertyService_ListTypeServer {
	mock := &MockPropertyService_ListTypeServer{ctrl: ctrl}
	mock.recorder = &MockPropertyService_ListTypeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyService_ListTypeServer) EXPECT() *MockPropertyService_ListTypeServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPropertyService_ListTypeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPropertyService_ListTypeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPropertyService_ListTypeServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockPropertyService_ListTypeServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPropertyService_ListTypeServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPropertyService_ListTypeServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPropertyService_ListTypeServer) Send(arg0 *PropertyType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPropertyService_ListTypeServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPropertyService_ListTypeServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPropertyService_ListTypeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPropertyService_ListTypeServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPropertyService_ListTypeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPropertyService_ListTypeServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPropertyService_ListTypeServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPropertyService_ListTypeServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPropertyService_ListTypeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPropertyService_ListTypeServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPropertyService_ListTypeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPropertyService_ListTypeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPropertyService_ListTypeServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPropertyService_ListTypeServer)(nil).SetTrailer), arg0)
}

// MockPropertyService_HistoryOfPropertyServer is a mock of PropertyService_HistoryOfPropertyServer interface.
type MockPropertyService_HistoryOfPropertyServer struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyService_HistoryOfPropertyServerMockRecorder
}

// MockPropertyService_HistoryOfPropertyServerMockRecorder is the mock recorder for MockPropertyService_HistoryOfPropertyServer.
type MockPropertyService_HistoryOfPropertyServerMockRecorder struct {
	mock *MockPropertyService_HistoryOfPropertyServer
}

// NewMockPropertyService_HistoryOfPropertyServer creates a new mock instance.
func NewMockPropertyService_HistoryOfPropertyServer(ctrl *gomock.Controller) *MockPropertyService_HistoryOfPropertyServer {
	mock := &MockPropertyService_HistoryOfPropertyServer{ctrl: ctrl}
	mock.recorder = &MockPropertyService_HistoryOfPropertyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyService_HistoryOfPropertyServer) EXPECT() *MockPropertyService_HistoryOfPropertyServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPropertyService_HistoryOfPropertyServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPropertyService_HistoryOfPropertyServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockPropertyService_HistoryOfPropertyServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPropertyService_HistoryOfPropertyServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPropertyService_HistoryOfPropertyServer) Send(arg0 *PropertyState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPropertyService_HistoryOfPropertyServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPropertyService_HistoryOfPropertyServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPropertyService_HistoryOfPropertyServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPropertyService_HistoryOfPropertyServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPropertyService_HistoryOfPropertyServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPropertyService_HistoryOfPropertyServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPropertyService_HistoryOfPropertyServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPropertyService_HistoryOfPropertyServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPropertyService_HistoryOfPropertyServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPropertyService_HistoryOfPropertyServer)(nil).SetTrailer), arg0)
}

// MockPropertyService_SearchPropertyServer is a mock of PropertyService_SearchPropertyServer interface.
type MockPropertyService_SearchPropertyServer struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyService_SearchPropertyServerMockRecorder
}

// MockPropertyService_SearchPropertyServerMockRecorder is the mock recorder for MockPropertyService_SearchPropertyServer.
type MockPropertyService_SearchPropertyServerMockRecorder struct {
	mock *MockPropertyService_SearchPropertyServer
}

// NewMockPropertyService_SearchPropertyServer creates a new mock instance.
func NewMockPropertyService_SearchPropertyServer(ctrl *gomock.Controller) *MockPropertyService_SearchPropertyServer {
	mock := &MockPropertyService_SearchPropertyServer{ctrl: ctrl}
	mock.recorder = &MockPropertyService_SearchPropertyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyService_SearchPropertyServer) EXPECT() *MockPropertyService_SearchPropertyServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPropertyService_SearchPropertyServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPropertyService_SearchPropertyServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPropertyService_SearchPropertyServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockPropertyService_SearchPropertyServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPropertyService_SearchPropertyServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPropertyService_SearchPropertyServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPropertyService_SearchPropertyServer) Send(arg0 *Property) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPropertyService_SearchPropertyServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPropertyService_SearchPropertyServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPropertyService_SearchPropertyServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPropertyService_SearchPropertyServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPropertyService_SearchPropertyServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPropertyService_SearchPropertyServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPropertyService_SearchPropertyServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPropertyService_SearchPropertyServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPropertyService_SearchPropertyServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPropertyService_SearchPropertyServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPropertyService_SearchPropertyServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPropertyService_SearchPropertyServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPropertyService_SearchPropertyServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPropertyService_SearchPropertyServer)(nil).SetTrailer), arg0)
}

// MockPropertyService_ListSubscriptionsServer is a mock of PropertyService_ListSubscriptionsServer interface.
type MockPropertyService_ListSubscriptionsServer struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyService_ListSubscriptionsServerMockRecorder
}

// MockPropertyService_ListSubscriptionsServerMockRecorder is the mock recorder for MockPropertyService_ListSubscriptionsServer.
type MockPropertyService_ListSubscriptionsServerMockRecorder struct {
	mock *MockPropertyService_ListSubscriptionsServer
}

// NewMockPropertyService_ListSubscriptionsServer creates a new mock instance.
func NewMockPropertyService_ListSubscriptionsServer(ctrl *gomock.Controller) *MockPropertyService_ListSubscriptionsServer {
	mock := &MockPropertyService_ListSubscriptionsServer{ctrl: ctrl}
	mock.recorder = &MockPropertyService_ListSubscriptionsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyService_ListSubscriptionsServer) EXPECT() *MockPropertyService_ListSubscriptionsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPropertyService_ListSubscriptionsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPropertyService_ListSubscriptionsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPropertyService_ListSubscriptionsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockPropertyService_ListSubscriptionsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPropertyService_ListSubscriptionsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPropertyService_ListSubscriptionsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPropertyService_ListSubscriptionsServer) Send(arg0 *Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPropertyService_ListSubscriptionsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPropertyService_ListSubscriptionsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPropertyService_ListSubscriptionsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPropertyService_ListSubscriptionsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPropertyService_ListSubscriptionsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPropertyService_ListSubscriptionsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPropertyService_ListSubscriptionsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPropertyService_ListSubscriptionsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPropertyService_ListSubscriptionsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPropertyService_ListSubscriptionsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPropertyService_ListSubscriptionsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPropertyService_ListSubscriptionsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPropertyService_ListSubscriptionsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPropertyService_ListSubscriptionsServer)(nil).SetTrailer), arg0)
}
